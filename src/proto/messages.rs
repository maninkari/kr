// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:orderbook.Empty)
pub struct Empty {
    // special fields
    // @@protoc_insertion_point(special_field:orderbook.Empty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Empty>(
            "Empty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Empty {
    const NAME: &'static str = "Empty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Empty {
        static instance: Empty = Empty {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Empty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Empty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:orderbook.Summary)
pub struct Summary {
    // message fields
    // @@protoc_insertion_point(field:orderbook.Summary.spread)
    pub spread: f64,
    // @@protoc_insertion_point(field:orderbook.Summary.bids)
    pub bids: ::std::vec::Vec<Level>,
    // @@protoc_insertion_point(field:orderbook.Summary.asks)
    pub asks: ::std::vec::Vec<Level>,
    // special fields
    // @@protoc_insertion_point(special_field:orderbook.Summary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Summary {
    fn default() -> &'a Summary {
        <Summary as ::protobuf::Message>::default_instance()
    }
}

impl Summary {
    pub fn new() -> Summary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spread",
            |m: &Summary| { &m.spread },
            |m: &mut Summary| { &mut m.spread },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bids",
            |m: &Summary| { &m.bids },
            |m: &mut Summary| { &mut m.bids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "asks",
            |m: &Summary| { &m.asks },
            |m: &mut Summary| { &mut m.asks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Summary>(
            "Summary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Summary {
    const NAME: &'static str = "Summary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.spread = is.read_double()?;
                },
                18 => {
                    self.bids.push(is.read_message()?);
                },
                26 => {
                    self.asks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.spread != 0. {
            my_size += 1 + 8;
        }
        for value in &self.bids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.asks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.spread != 0. {
            os.write_double(1, self.spread)?;
        }
        for v in &self.bids {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.asks {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Summary {
        Summary::new()
    }

    fn clear(&mut self) {
        self.spread = 0.;
        self.bids.clear();
        self.asks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Summary {
        static instance: Summary = Summary {
            spread: 0.,
            bids: ::std::vec::Vec::new(),
            asks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Summary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Summary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Summary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Summary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:orderbook.Level)
pub struct Level {
    // message fields
    // @@protoc_insertion_point(field:orderbook.Level.exchange)
    pub exchange: ::std::string::String,
    // @@protoc_insertion_point(field:orderbook.Level.price)
    pub price: f64,
    // @@protoc_insertion_point(field:orderbook.Level.amount)
    pub amount: f64,
    // special fields
    // @@protoc_insertion_point(special_field:orderbook.Level.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Level {
    fn default() -> &'a Level {
        <Level as ::protobuf::Message>::default_instance()
    }
}

impl Level {
    pub fn new() -> Level {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exchange",
            |m: &Level| { &m.exchange },
            |m: &mut Level| { &mut m.exchange },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &Level| { &m.price },
            |m: &mut Level| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &Level| { &m.amount },
            |m: &mut Level| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Level>(
            "Level",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Level {
    const NAME: &'static str = "Level";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.exchange = is.read_string()?;
                },
                17 => {
                    self.price = is.read_double()?;
                },
                25 => {
                    self.amount = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.exchange.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.exchange);
        }
        if self.price != 0. {
            my_size += 1 + 8;
        }
        if self.amount != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.exchange.is_empty() {
            os.write_string(1, &self.exchange)?;
        }
        if self.price != 0. {
            os.write_double(2, self.price)?;
        }
        if self.amount != 0. {
            os.write_double(3, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Level {
        Level::new()
    }

    fn clear(&mut self) {
        self.exchange.clear();
        self.price = 0.;
        self.amount = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Level {
        static instance: Level = Level {
            exchange: ::std::string::String::new(),
            price: 0.,
            amount: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Level {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Level").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Level {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Level {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x12\torderbook\"\x07\n\x05Empty\"m\n\x07Summary\x12\
    \x16\n\x06spread\x18\x01\x20\x01(\x01R\x06spread\x12$\n\x04bids\x18\x02\
    \x20\x03(\x0b2\x10.orderbook.LevelR\x04bids\x12$\n\x04asks\x18\x03\x20\
    \x03(\x0b2\x10.orderbook.LevelR\x04asks\"Q\n\x05Level\x12\x1a\n\x08excha\
    nge\x18\x01\x20\x01(\tR\x08exchange\x12\x14\n\x05price\x18\x02\x20\x01(\
    \x01R\x05price\x12\x16\n\x06amount\x18\x03\x20\x01(\x01R\x06amount2L\n\
    \x13OrderbookAggregator\x125\n\x0bBookSummary\x12\x10.orderbook.Empty\
    \x1a\x12.orderbook.Summary0\x01J\xa6\x04\n\x06\x12\x04\0\0\x13\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x12\n\n\n\x02\
    \x06\0\x12\x04\x03\0\x05\x01\n\n\n\x03\x06\0\x01\x12\x03\x03\x08\x1b\n\
    \x0b\n\x04\x06\0\x02\0\x12\x03\x04\x044\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x04\x08\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x04\x14\x19\n\x0c\n\
    \x05\x06\0\x02\0\x06\x12\x03\x04$*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x04+2\n\t\n\x02\x04\0\x12\x03\x07\0\x10\n\n\n\x03\x04\0\x01\x12\x03\x07\
    \x08\r\n\n\n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \t\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x04\x16\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\x14\x15\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x0b\x04\x1c\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\
    \x0b\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x0b\r\x12\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x0b\x13\x17\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x0b\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0c\x04\x1c\
    \n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\x02\x06\x12\x03\x0c\r\x12\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0c\x13\x17\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0c\x1a\x1b\n\n\n\
    \x02\x04\x02\x12\x04\x0f\0\x13\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\
    \r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x10\x04\x18\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x10\x0b\
    \x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x10\x16\x17\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x11\x04\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x11\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x11\x0b\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x11\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x12\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x12\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x12\x0b\x11\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03\x12\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Empty::generated_message_descriptor_data());
            messages.push(Summary::generated_message_descriptor_data());
            messages.push(Level::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
